   
   ASSIGNMENT-2
    ------------
   1) public int arrayPairSum(int[] nums) {
         Arrays.sort(nums);
        int sum = 0;
        for(int i = 0 ; i < nums.length-1; i= i+2){
            sum = sum+ Math.min(nums[i],nums[i+1]);
        }
        return sum;
    }

2) public int distributeCandies(int[] candyType) {
     
     int n=candyType.length;
     int candysAllowed=n/2;
     if(candysAllowed<=findTypesOfCandy(candyType)){
         return candysAllowed;
     }else return findTypesOfCandy(candyType);

        
    }
    public int findTypesOfCandy(int[] ct){
        Arrays.sort(ct);
        int count=1;
        for(int i=1;i<ct.length;i++){
            if(ct[i]!=ct[i-1]) count++;
        }
        return count;
    }
3) public int findLHS(int[] nums) {
         Map<Integer,Integer> m=new HashMap<>();
        for(int i:nums)
            m.put(i,m.getOrDefault(i,0)+1);
        
        int max=0;
        for(int i:m.keySet())
            if(m.containsKey(i+1)) max=Math.max(max,m.get(i)+m.get(i+1)); 
        
        return max;
    }
4) public boolean canPlaceFlowers(int[] flowerbed, int n) {
         int planted=0;
        for(int i=0;i<flowerbed.length;i++){
            if(flowerbed[i]==0){
              int prev=(i==0||flowerbed[i-1]==0)?0:1;
              int next=((i==flowerbed.length-1) || flowerbed[i+1]==0)?0:1;
              if(prev==0 && next==0) {
                  planted++;
                  flowerbed[i]=1;
              }

            }
        }
        return planted>=n;
       
        
    }
5) public int maximumProduct(int[] nums) {
    
        int maxProduct=Integer.MIN_VALUE;
        int prod=1;
        int left=0;
        for(int i=0;i<3;i++) {
         prod=prod*nums[i];
        }
      maxProduct=  Math.max(prod,maxProduct);
        for(int i=3;i<nums.length;i++){
            prod=prod/nums[left]*nums[i];
            left++;
        }
        maxProduct= Math.max(prod,maxProduct);
        return maxProduct;
        
    }
6) public int search(int[] nums, int target) {
       if(nums.length==0) return -1;

       int l=0;
       int r=nums.length-1;
       while(l<=r){
        int mid=l+(r-l)/2;
        if(nums[mid]==target) return mid;

       else if(nums[mid]>target) r=mid-1;
        else l=mid+1;

       }
       return -1;

        
    }
7) public boolean isMonotonic(int[] nums) {
            for(int i = 0; i < nums.length - 1; i++){
            if(nums[i] < nums[i + 1]) {
                
                for(int j = i + 1; j < nums.length - 1; j++){
                    if(nums[j] > nums[j + 1]) return false;
                }

                return true;
            }else if(nums[i] > nums[i + 1]) {
                
                for(int j = i + 1; j < nums.length - 1; j++){
                    if(nums[j] < nums[j + 1]) return false;
                }

                return true;
            }
        }

        return true;
    }
8) public int smallestRangeI(int[] nums, int k) {
         //find max and min element 
        int max, min;
        max=min=nums[0];
        for(int i=0;i<nums.length;i++){
            max=Math.max(max,nums[i]);
            min=Math.min(min,nums[i]);

        }
        // how will be the difference will be minimum
        // when we max=max-k and min=min+k;

        int diff= (max-k)-(min+k);

        return (diff>0) ? diff : 0;
    }